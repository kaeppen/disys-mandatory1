swagger: "2.0"

info:
    description: Monolith REST api for mandatory exercise 1
    title: Mandatory exercise 1 (daas, seho, lanc)
    version: 1.0.0
host: "localhost:8080"
#basePath: /v1 <-- skal denne vÃ¦re der? 
schemes:
  - https
  - http

paths: 
  /course: 
    get: 
      tags: 
      - "course"
      summary: "Get all courses"
      operationId: "getCourses"
      #should have had "produces"? as it produces some output? 
      responses: 
        "200":
          description: "OK" 
    post: 
      tags: 
        - "course"
      summary: "Add a course"
      operationId: "addCourse"
      parameters: 
      - name: "body"
        in: "body"
        description: "The course object"
        schema: 
          type: object
          required: 
            - ID
            - Name
          properties: 
            ID:
              type: integer
            Rating: 
              type: number
            Name: 
              type: string
            Workload: 
              type: number 
            Students: 
              type: array
              items:
                type: string
      responses: 
        "201":
          description: "OK"
        "405": #aint actually implemented in the code
          description: "Invalid input"
      
  /course/{courseId}:
    get: 
      tags: 
      - "course"
      description: "This is used to find a course by id"
      summary: "Find a course by id"
      operationId: "getCourseByID"
      parameters: 
      - name: "courseId"
        in: "path"
        description: "ID of course to find"
        required: true
        type: "integer"
        format: "int64"
      responses: 
        "200":
          description: "OK" 
        "404":
          description: "Course not found"
    delete: 
      tags:
      - "course"
      summary: "Deletes a course"
      operationId: "deleteCourseByID"
      parameters: 
      - name: "courseId"
        in: "path"
        description: "ID of course to delete"
        required: true
        type: "integer"
        format: "int64"
      responses: 
        "200":
          description: "Course deleted successfully"
        "404":
          description: "Course not found"
    put: 
      tags:
      - "course"
      summary: "Update a course"
      operationId: "updateCourse"
      parameters: 
      - name: "courseId"
        in: "path"
        description: "ID of course that needs updating"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "The course object with updated information"
        schema: 
          type: object
          required: 
            - ID
            - Name
          properties: 
            ID:
              type: integer
            Rating: 
              type: number
            Name: 
              type: string
            Workload: 
              type: number 
            Students: 
              type: array
              items:
                type: string
      responses: 
        "200":
          description: "OK"
        "400": #a more describing code should be possible to find... 
          description: "Something went wrong" 

  /student: 
    get: 
      tags: 
      - "student"
      summary: "Get all students"
      operationId: "getStudents"
      responses: 
        "200":
          description: "OK" 
    post: 
      tags: 
        - "student"
      summary: "Add a student"
      operationId: "addStudent"
      responses: 
        "201":
          description: "OK"
        "405": #not in the go code
          description: "Invalid input"
      
  /student/{studentId}:
    get: 
      tags: 
      - "student"
      description: "This is used to find a student by id"
      summary: "Find a student by id"
      operationId: "getStudentByID"
      parameters: 
      - name: "studentId"
        in: "path"
        description: "ID of student to find"
        required: true
        type: "integer"
        format: "int64"
      responses: 
        "200":
          description: "OK" 
        "404":
          description: "Student not found"
    delete: 
      tags:
      - "student"
      summary: "Deletes a student"
      operationId: "deleteStudentByID"
      parameters: 
      - name: "studentId"
        in: "path"
        description: "ID of student to delete"
        required: true
        type: "integer"
        format: "int64"
      responses: 
        "200":
          description: "Student deleted successfully"
        "404":
          description: "Student not found"
    put: 
      tags:
      - "student"
      summary: "Update a student"
      operationId: "updateStudent"
      parameters: 
      - name: "studentId"
        in: "path"
        description: "ID of student that needs updating"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "The student object with updated information"
        schema: 
          type: object
          required: 
            - ID
            - Name
          properties: 
            ID:
              type: integer
            Name: 
              type: string
            Courses: 
              type: array
              items:
                type: string
      responses: 
        "200":
          description: "OK"
        "400": #a more describing code should be possible to find... 
          description: "Something went wrong" 

  /teacher: 
    get: 
      tags: 
      - "teacher"
      summary: "Get all teacher"
      operationId: "getTeachers"
      responses: 
        "200":
          description: "OK" 
    post: 
      tags: 
        - "teacher"
      summary: "Add a teacher"
      operationId: "addTeacher"
      responses: 
        "201":
          description: "OK"
        "405":  
          description: "Invalid input"
      
  /teacher/{teacherId}:
    get: 
      tags: 
      - "teacher"
      description: "This is used to find a teacher by id"
      summary: "Find a teacher by id"
      operationId: "getTeacherByID"
      parameters: 
      - name: "teacherId"
        in: "path"
        description: "ID of teacher to find"
        required: true
        type: "integer"
        format: "int64"
      responses: 
        "200":
          description: "OK" 
        "404":
          description: "Teacher not found"
    delete: 
      tags:
      - "teacher"
      summary: "Deletes a teacher"
      operationId: "deleteTeacherByID"
      parameters: 
      - name: "teacherId"
        in: "path"
        description: "ID of teacher to delete"
        required: true
        type: "integer"
        format: "int64"
      responses: 
        "200":
          description: "Teacher deleted successfully"
        "404":
          description: "Teacher not found"
    put: 
      tags:
      - "teacher"
      summary: "Update a teacher"
      operationId: "updateTeacher"
      parameters: 
      - name: "teacherId"
        in: "path"
        description: "ID of teacher that needs updating"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "The teacher object with updated information"
        schema: 
          type: object
          required: 
            - ID
            - Name
          properties: 
            ID:
              type: integer
            Name: 
              type: string
            Popularity: 
              type: number
      responses: 
        "200":
          description: "OK"
        "400": #a more describing code should be possible to find... 
          description: "Something went wrong"                